// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  ADMIN
  AUTHOR //Crear los posts
  USER //Solo puede leer los posts
}

// model Author {
//   id Int @id @default(autoincrement())
//   name String
//   email String @unique
//   password String
//   role Role @default(AUTHOR)
//   deletedAt DateTime?
//   posts Post[]
//   comments Comment[]
// }

model Category { 
  id String @id @default(uuid())
  name String @unique
  deletedAt DateTime?
  posts Post[] @relation("PostCategories")

  @@map("category")
}

model Comment {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  postId String
  post Post @relation(fields: [postId], references: [id])
  authorId String
  //author Author @relation(fields: [authorId], references: [id])
  parentId String?
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comment")
}

model Post {
  id String @id @default(uuid())
  title String
  // description String
  content String
  likes Int @default(0)
  image String[]
  tags String[]
  slug String @unique
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  // authorId Int
  //author Author @relation(fields: [authorId], references: [id])
  categories Category[] @relation("PostCategories")
  comments Comment[]
  @@map("post")
  @@index([slug])
}