// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  ADMIN
  AUTHOR //Crear los posts
  USER //Solo puede leer los posts
}

model Author {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(AUTHOR)
  bio String?
  avatarUrl String?
  deletedAt DateTime?
  posts Post[]
  comments Comment[]
}

model Category { 
  id Int @id @default(autoincrement())
  name String @unique
  deletedAt DateTime?
  posts Post[] @relation("PostCategories")
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  postId Int
  post Post @relation(fields: [postId], references: [id])
  authorId Int
  author Author @relation(fields: [authorId], references: [id])
  parentId Int?
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  likes Int @default(0)
  images String[]
  tags String[]
  slug String @unique
  status String @default("PUBLISHED") 
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  authorId Int
  author Author @relation(fields: [authorId], references: [id])
  categories Category[] @relation("PostCategories")
  comments Comment[]
  @@index([slug])
}